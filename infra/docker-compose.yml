# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.6.0
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3.8'
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.1.1-python3.8
  environment:
    &airflow-common-env
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  volumes:
    - ../dataAnalysis/airflow/dags:/opt/airflow/dags
    - ../dataAnalysis/airflow/data:/opt/airflow/data
    - ./logs/airflow:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - 5432:5432
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    
    networks:
    - kafka

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash -c "/bin/bash -c \"$${@}\""
    command: |
      /bin/bash -c "
        airflow db init
        airflow db upgrade
        airflow users create -r Admin -u airflow -e airflow@airflow.com -f admin -l user -p airflow
      "
    environment:
      <<: *airflow-common-env
    networks:
    - kafka

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    environment:
      <<: *airflow-common-env
    networks:
    - kafka
    

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8081:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    
    environment:
      <<: *airflow-common-env
    networks:
    - kafka

  zookeeper-1:
    container_name: zookeeper-1
    image: saurabh/zookeeper:2.7.0
    build:
      context: ./zookeeper
    volumes:
    - ./config/zookeeper-1/zookeeper.properties:/kafka/config/zookeeper.properties
    - ./data/zookeeper-1/:/tmp/zookeeper/
    networks:
    - kafka
  
  nifi:
    container_name: nifi
    image: apache/nifi:1.14.0
    ports:
    - 8091:8080
    environment:
    - NIFI_WEB_HTTP_PORT=8080
    - NIFI_CLUSTER_IS_NODE=true
    - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
    - NIFI_ZK_CONNECT_STRING=zookeeper-1:2181
    - NIFI_ELECTION_MAX_WAIT=30 sec
    - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
    volumes:
    - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
    - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
    - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
    - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
    - ./nifi/state:/opt/nifi/nifi-current/state
    - ./nifi/logs:/opt/nifi/nifi-current/logs
    - ./nifi/jars:/opt/nifi/nifi-current/jars
    # uncomment the next line after copying the /conf directory from the container to your local directory to persist NiFi flows
    #- ./nifi/conf:/opt/nifi/nifi-current/conf
    networks:
    - kafka

    healthcheck:
      test: ["CMD", "curl", "-f", "http://mynifi:8080/nifi/"]
      interval: 30s
      timeout: 20s
      retries: 3


  kafka-1:
    container_name: kafka-1
    image: saurabh/kafka:2.7.0
    build: 
      context: ./kafka
    volumes:
    - ./config/kafka-1/server.properties:/kafka/config/server.properties
    - ./data/kafka-1/:/tmp/kafka-logs/
    depends_on:
    - zookeeper-1
    networks:
    - kafka


  dbt:
    build: 
      context: ./dbt
      dockerfile: /dockerfile.dbt
    
    volumes:
      - ../dataAnalysis/dbt:/dbt
    
    depends_on:
      - postgres
      - nifi
    environment:
      - DBT_PROFILES_DIR=/dbt/profiles
      - DBT_PROJECT_DIR=/dbt/DWH
    networks:
    - kafka

  api:
    build: 
      context: ./api
      dockerfile: /dockerfile.api
    
    volumes:
      - ../dataAnalysis/api:/api
      - ./nifi/jars/data:/api/data
    
    depends_on:
      - postgres
      - nifi
      - kafka-1
    networks:
    - kafka

networks: 
  kafka:
    name: kafka


volumes:
  postgres-db-volume:
